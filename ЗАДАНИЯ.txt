========
Задача 1
========
Создайте класс отрезков на координатной плоскости, описав в нём все необходимые свойства, подобрав им понятные имена и правильные типы данных.
Опишите в классе конструктор, позволяющий при создании нового объекта явно задать все его свойства. Если это необходимо, то проверьте допустимость их значений в конструкторе (например, в классе обыкновенных дробей нельзя создавать дробь с нулевым знаменателем).
Создайте в классе метод, проверяющий равна ли длина двух отрезков.
С использованием построенного класса создайте два отрезка: один от точки (1;1) до точки (2;2) и второй отрезок от точки (-3;0) до точки (1;1). Проверьте с помощью созданного метода равна ли их длина и если равна, то выведите соответсвующее сообщение на экран.

========
Задача 2
========
Необходимо реализовать иерархию классов.
Предположим, мы хотим анализироваьть текст, помечая его опрделенными метками. Метки заданы перечислением:

enum Label {
    SPAM, NEGATIVE_TEXT, TOO_LONG, OK
}

Общий интерфейс анализа текста:
 
interface TextAnalyzer {
    Label processText(String text);
}

Необходимо реализовать 3 класса, которые реализуют этот интерфейс: SpamAnalyzer, NegativeTextAnalyzer и TooLongTextAnalyzer и абстрактный класс AbstractKeywordAnalyzer
AbstractKeywordAnalyzer должен иметь 2 абстрактных метода: getKeywords(), который возвращает набор ключевых слов для анализа и getLabel(), который возвращает метку, в случае, 
если р-тат анализа положительный. Так же на основе этих методов в этом классе должна быть реализован метод processText() и не должен быть реализован в наседниках.
Класс SpamAnalyzer должен наследоваться от KeywordAnalyzer, в нем должен быть конструктор, принимающий массив строк. Если одна из этих строк присутствует в проверямом 
тексте, возвращаем Label.SPAM.
Класс NegativeTextAnalyzer должен наследоваться от KeywordAnalyzer и пусть анализирует тект на наличие одного из 3х смайликов: ":(", "=(", ":|" и возвращает 
Label.NEGATIVE_TEXT, если р-тат положительный.
Класс TooLongTextAnalyzer в конструкторе должен принимать int и если lkbyf анализируемого текста больше этого значения, метод анализа должен возвращать label.TOO_LONG.
Во всех остальных случаях должен возвращаться Label.OK
Реализовать статический метод для проверки текста с 2-мя параметрами: TextAnalyzer[] - массив экземпляров классов для проверки текста, String - проверяемый текст, возвращать 
должен Label - первую не-OK метку в порядке набора анализаторов текста, или OK, если все анализаторы вернули OK. 

Рекомендации:
Можно пока не заморачиваться с проверкой допустимых значений.
Посмотрите в сторону String.contains().
Конечно, вы можете задавать в классах любые дополнительные поля и методы для вашего удобства. Однако, если это возможно, стоит их помечать приватными.
Telegram: +77713668177